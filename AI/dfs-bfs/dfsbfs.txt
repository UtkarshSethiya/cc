from collections import defaultdict
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def addedge(self,u,v):
        self.graph[u].append(v)
        self.graph[v].append(u)
    def bfs(self,s):
        vis = [False]*(max(self.graph)+1)
        queue = []
        queue.append(s)
        vis[s] = True
        while queue:
            s = queue.pop(0)
            print(s,end=" ")
            for i in self.graph[s]:
                if (vis[i]== False):
                    queue.append(i)
                    vis[i]=True
    def dfsutil(self,v,vis):
            vis.add(v)
            print(v,end=" ")

            for i in self.graph[v]:
                if i not in vis:
                    self.dfsutil(i,vis)
    def dfs(self,v):
            vis = set()
            self.dfsutil(v,vis)
g = Graph()
g.addedge(0,1)
g.addedge(0,2)
g.addedge(1,3)
g.addedge(1,4)
g.addedge(4,5)
g.addedge(2,6)
g.addedge(2,7)
g.bfs(0)
print(" ")
g.dfs(0)